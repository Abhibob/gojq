- name: empty
  input: ''
  expected: ''

- name: number
  args:
    - '.'
  input: '128'
  expected: |
    128

- name: string
  args:
    - '.'
  input: '"Hello, world!"'
  expected: |
    "Hello, world!"

- name: object
  input: '{"foo": 128}'
  expected: |
    {
      "foo": 128
    }

- name: object index
  args:
    - '.foo'
  input: '{"foo": 128}'
  expected: |
    128

- name: object index
  args:
    - '.["foo"]'
  input: '{"foo": 128}'
  expected: |
    128

- name: object index after iterator
  args:
    - '{ message: .[].message }'
  input: '[ {"message": "Hello, world" } ]'
  expected: |
    {
      "message": "Hello, world"
    }

- name: expected object
  args:
    - '.foo.bar'
  input: '{"foo": 128}'
  error: |
    expected an object but got: number (128)

- name: expected object in pipe
  args:
    - '.foo|.bar'
  input: '{"foo": 128}'
  error: |
    expected an object but got: number (128)

- name: expected object after iterator
  args:
    - '.[]|.foo|.bar'
  input: '[128]'
  error: |
    expected an object but got: number (128)

- name: object optional
  args:
    - '.foo.bar.baz?'
  input: '{"foo": 128}'

- name: array index
  args:
    - '.[-5],.[-1],.[0],.[2],.[3],.[4]'
  input: '[16, 32, 48, 64]'
  expected: |
    null
    64
    16
    48
    64
    null

- name: array slice
  args:
    - '.[2:], .[:2], .[1:3], .[0:4], .[2:1], .[-2:], .[:-2], .[-2:-1], .[-10:], .[:10], .[10:], .[:-10]'
  input: '[16, 32, 48, 64]'
  expected: |
    [
      48,
      64
    ]
    [
      16,
      32
    ]
    [
      32,
      48
    ]
    [
      16,
      32,
      48,
      64
    ]
    []
    [
      48,
      64
    ]
    [
      16,
      32
    ]
    [
      48
    ]
    [
      16,
      32,
      48,
      64
    ]
    [
      16,
      32,
      48,
      64
    ]
    []
    []

- name: iterator in array index
  args:
    - '.[.[]],.[.[]:],.[:.[]],.[.[]:.[]],.[-.[]],.[--.[]]'
  input: '[0, 1, 2]'
  expected: |
    0
    1
    2
    [
      0,
      1,
      2
    ]
    [
      1,
      2
    ]
    [
      2
    ]
    []
    [
      0
    ]
    [
      0,
      1
    ]
    []
    [
      0
    ]
    [
      0,
      1
    ]
    []
    []
    [
      1
    ]
    []
    []
    []
    0
    2
    1
    0
    1
    2

- name: expected array
  args:
    - '.[0]'
  input: '{"foo": 128}'
  error: |
    expected an array but got: object ({"foo":128})

- name: iterator
  args:
    - '.foo | .[] | .'
  input: '{"foo": [1,2,{"bar":[]},[3,4,5]]}'
  expected: |
    1
    2
    {
      "bar": []
    }
    [
      3,
      4,
      5
    ]

- name: iterator optional
  args:
    - '.[]?'
  input: '10'

- name: object iterator
  args:
    - '.[]'
  input: '{"foo": 128}'
  expected: |
    128

- name: object optional after iterator
  args:
    - '[.[].name?]'
  input: '[ 1, { "name": 2 }, 3, { "name": 4 } ]'
  expected: |
    [
      2,
      4
    ]

- name: pipe
  args:
    - '.foo | .bar'
  input: '{"foo": {"bar": {"baz": 128}}}'
  expected: |
    {
      "baz": 128
    }

- name: null values
  args:
    - '.[] | null'
  input: '["a", 1, [], {}]'
  expected: |
    null
    null
    null
    null

- name: boolean values
  args:
    - '.[] | true, false'
  input: '["a", 1]'
  expected: |
    true
    false
    true
    false

- name: empty value
  args:
    - '.[] | empty, empty'
  input: '[0, 1]'

- name: unary operators
  args:
    - 'map(-.[]), map(+.[])'
  input: '[[1,2,3]]'
  expected: |
    [
      -1,
      -2,
      -3
    ]
    [
      1,
      2,
      3
    ]

- name: object construction
  args:
    - '{ foo: .foo.bar, "bar": .foo, "": false }'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {
      "": false,
      "bar": {
        "bar": [
          "a",
          "b"
        ]
      },
      "foo": [
        "a",
        "b"
      ]
    }

- name: empty object
  args:
    - '{}'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {}

- name: iterator in object
  args:
    - '{ foo: .foo[], bar: .bar[] }'
  input: '{"foo":[1,2],"bar":["a","b"]}'
  expected: |
    {
      "bar": "a",
      "foo": 1
    }
    {
      "bar": "b",
      "foo": 1
    }
    {
      "bar": "a",
      "foo": 2
    }
    {
      "bar": "b",
      "foo": 2
    }

- name: iterator in object key
  args:
    - '{ (.[]): .. }'
  input: '["a", "b"]'
  expected: |
    {
      "a": [
        "a",
        "b"
      ]
    }
    {
      "a": "a"
    }
    {
      "a": "b"
    }
    {
      "b": [
        "a",
        "b"
      ]
    }
    {
      "b": "a"
    }
    {
      "b": "b"
    }

- name: binary operator in object key and value
  args:
    - '{ (.[] + .[]): (.[] + .[]) }'
  input: '["foo", "bar"]'
  expected: |
    {
      "foofoo": "foofoo"
    }
    {
      "foofoo": "barfoo"
    }
    {
      "foofoo": "foobar"
    }
    {
      "foofoo": "barbar"
    }
    {
      "barfoo": "foofoo"
    }
    {
      "barfoo": "barfoo"
    }
    {
      "barfoo": "foobar"
    }
    {
      "barfoo": "barbar"
    }
    {
      "foobar": "foofoo"
    }
    {
      "foobar": "barfoo"
    }
    {
      "foobar": "foobar"
    }
    {
      "foobar": "barbar"
    }
    {
      "barbar": "foofoo"
    }
    {
      "barbar": "barfoo"
    }
    {
      "barbar": "foobar"
    }
    {
      "barbar": "barbar"
    }

- name: error in object key
  args:
    - '{ (.[]): .. }'
  input: '["a", 1]'
  expected: |
    {
      "a": [
        "a",
        1
      ]
    }
    {
      "a": "a"
    }
    {
      "a": 1
    }
  error: |
    expected a string for object key but got: number (1)

- name: error in object value
  args:
    - '.[] | { (.k): .a.b }'
  input: '[{"a":{"b":10},"k":"a"}, {"a":10,"k":"b"}]'
  expected: |
    {
      "a": 10
    }
  error: |
    expected an object but got: number (10)

- name: pipe in object key
  args:
    - '{ (.foo|.bar): .foo.bar }'
  input: '{"foo":{"bar":"baz"}}'
  expected: |
    {
      "baz": "baz"
    }

- name: number in object key
  args:
    - '{ (.foo): .foo }'
  input: '{"foo":10}'
  error: |
    expected a string for object key but got: number (10)

- name: null in object key
  args:
    - '{ (.foo): .foo }'
  input: '{}'
  error: |
    expected a string for object key but got: null

- name: array
  args:
    - '[.foo, ., false]'
  input: '{"foo": {"bar": 128}}'
  expected: |
    [
      {
        "bar": 128
      },
      {
        "foo": {
          "bar": 128
        }
      },
      false
    ]

- name: empty array
  args:
    - '[]'
  input: '{"foo": {"bar": 128}}'
  expected: |
    []

- name: pipe in array
  args:
    - '[.foo|.bar]'
  input: '{"foo": {"bar": 128}}'
  expected: |
    [
      128
    ]

- name: iterator in array
  args:
    - '[.foo|.bar[][]]'
  input: '{"foo": {"bar": [[1],[2],[3]]}}'
  expected: |
    [
      1,
      2,
      3
    ]

- name: error after iterator
  args:
    - '[ .[] | .foo ]'
  input: '[ [1, 2, 3], 4, 5]'
  error: |
    expected an object but got: array ([1,2,3])

- name: function after iterator error
  args:
    - '.[] | .foo | null'
  input: '[1, 2, 3]'
  error: |
    expected an object but got: number (1)

- name: multiple iterators in array
  args:
    - '[.[],..,.[]]'
  input: '[1, 2, 3]'
  expected: |
    [
      1,
      2,
      3,
      [
        1,
        2,
        3
      ],
      1,
      2,
      3,
      1,
      2,
      3
    ]

- name: recurse
  args:
    - '..'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {
      "foo": {
        "bar": [
          "a",
          "b"
        ]
      }
    }
    {
      "bar": [
        "a",
        "b"
      ]
    }
    [
      "a",
      "b"
    ]
    "a"
    "b"

- name: recurse after iterator
  args:
    - '.[] | ..'
  input: '{"foo":[{"bar":128}]}'
  expected: |
    [
      {
        "bar": 128
      }
    ]
    {
      "bar": 128
    }
    128

- name: recurse and pipe
  args:
    - '.. | .foo?'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {
      "bar": [
        "a",
        "b"
      ]
    }
    null

- name: recurse in object key
  args:
    - '{ foo: .. }'
  input: '{"foo":[1,2,3]}'
  expected: |
    {
      "foo": {
        "foo": [
          1,
          2,
          3
        ]
      }
    }
    {
      "foo": [
        1,
        2,
        3
      ]
    }
    {
      "foo": 1
    }
    {
      "foo": 2
    }
    {
      "foo": 3
    }

- name: length function
  args:
    - 'map(length)'
  input: '[42, -42, {"a":1,"b":2}, [3,4,5], "Hello, world", "あいうえお", null]'
  expected: |
    [
      42,
      42,
      2,
      3,
      12,
      5,
      0
    ]

- name: length function error
  args:
    - 'length'
  input: 'false'
  error: |
    length cannot be applied to: boolean (false)

- name: keys function
  args:
    - '[.[]|keys]'
  input: '[{"a":1,"b":2}, [3,4,5]]'
  expected: |
    [
      [
        "a",
        "b"
      ],
      [
        0,
        1,
        2
      ]
    ]

- name: utf8bytelength function
  args:
    - 'utf8bytelength'
  input: '"あいうえお☆ミ"'
  expected: |
    21

- name: has function on objects
  args:
    - 'map(has(.c[]))'
  input: '[{"a":{"b":1},"c":["a","b"]}, {"c":["b","c"]}]'
  expected: |
    [
      true,
      false,
      false,
      true
    ]

- name: has function on arrays
  args:
    - 'map(has(2))'
  input: '[[1, 2, 3], [1, 3]]'
  expected: |
    [
      true,
      false
    ]

- name: has/0 is not defined
  args:
    - 'map(has)'
  input: '[0]'
  error: |
    function not defined: has/0

- name: has/2 is not defined
  args:
    - 'map(has(1; 2))'
  input: '[0]'
  error: |
    function not defined: has/2

- name: map function
  args:
    - 'map(..)'
  input: '[{"a":{"b":1}}, [2,3,4]]'
  expected: |
    [
      {
        "a": {
          "b": 1
        }
      },
      {
        "b": 1
      },
      1,
      [
        2,
        3,
        4
      ],
      2,
      3,
      4
    ]

- name: recurse/0 function
  args:
    - 'recurse'
  input: '{"a":{"b":[1]}}'
  expected: |
    {
      "a": {
        "b": [
          1
        ]
      }
    }
    {
      "b": [
        1
      ]
    }
    [
      1
    ]
    1

- name: recurse/1 function
  args:
    - 'recurse(.a[])'
  input: '{"a":[{"a": []}, {"a":[{"a":[]}]}]}'
  expected: |
    {
      "a": [
        {
          "a": []
        },
        {
          "a": [
            {
              "a": []
            }
          ]
        }
      ]
    }
    {
      "a": []
    }
    {
      "a": [
        {
          "a": []
        }
      ]
    }
    {
      "a": []
    }

- name: while function
  args:
    - '[while(.[0]<100; [.[1], .[0]+.[1]]) | .[0]] | join(",")'
  input: '[0, 1]'
  expected: |
    "0,1,1,2,3,5,8,13,21,34,55,89"

- name: until function
  args:
    - '[.,1] | until(.[0]==0; [.[0]-1, .[0]*.[1]]) | .[1]'
  input: '20'
  expected: |
    2432902008176640000

- name: join function
  args:
    - 'join(",")'
  input: '[null, false, true, 0, 1, "", "a", "b", "abc"]'
  expected: |
    ",false,true,0,1,,a,b,abc"

- name: join function with iterator argument
  args:
    - '. / "" | join(.[])'
  input: '"abcde"'
  expected: |
    "aabacadae"
    "abbbcbdbe"
    "acbcccdce"
    "adbdcddde"
    "aebecedee"

- name: function not defined
  args:
    - 'abc'
  input: '{}'
  error: |
    function not defined: abc/0

- name: argument count error
  args:
    - 'map(.;.)'
  input: '{}'
  error: |
    function not defined: map/2

- name: function declaration
  args:
    - 'def f(g): g | g; f(..)'
  input: '[0, 1]'
  expected: |
    [
      0,
      1
    ]
    0
    1
    0
    1

- name: argument count error for custom function
  args:
    - 'def f(g): g | g; f'
  input: '{}'
  error: |
    function not defined: f/0

- name: add, subtract, multiply, divide, modulo numbers
  args:
    - '[.[] + .[] % .[] * .[] - .[] / .[]] | while(length>0; .[8:]) | .[:8] | join(",")'
  input: '[5, 16]'
  expected: |
    "4,15,9,20,29,40,4,15"
    "4,15,20,31,84,95,4,15"
    "1.7999999999999998,12.8,6.8,17.8,26.8,37.8,1.7999999999999998,12.8"
    "1.7999999999999998,12.8,17.8,28.8,81.8,92.8,1.7999999999999998,12.8"
    "4.6875,15.6875,9.6875,20.6875,29.6875,40.6875,4.6875,15.6875"
    "4.6875,15.6875,20.6875,31.6875,84.6875,95.6875,4.6875,15.6875"
    "4,15,9,20,29,40,4,15"
    "4,15,20,31,84,95,4,15"

- name: zero division
  args:
    - '.[] / .[]'
  input: '[1, 0]'
  expected: |
    1
    0
  error: |
    cannot divide number (1) by: number (0)

- name: zero modulo
  args:
    - '.[] % .[]'
  input: '[1, 0]'
  expected: |
    0
    0
  error: |
    cannot modulo number (1) by: number (0)

- name: add strings
  args:
    - '.[] + .[] + "c"'
  input: '["a", "b"]'
  expected: |
    "aac"
    "bac"
    "abc"
    "bbc"

- name: multiply constant
  args:
    - '3 * .[], 2.5 * .[], .054e2 * .[]'
  input: '[1, 2.5, "abc"]'
  expected: |
    3
    7.5
    "abcabcabc"
    2.5
    6.25
    "abcabc"
    5.4
    13.5
    "abcabcabcabcabc"

- name: multiply strings
  args:
    - '(.[] * .[] * .[])?'
  input: '[2.5, 3.7, "abc"]'
  expected: |
    15.625
    23.125
    "abcabcabcabc"
    23.125
    34.225
    "abcabcabcabcabcabc"
    "abcabcabcabc"
    "abcabcabcabcabcabc"

- name: multiply objects
  args:
    - '.[] * .[]'
  input: '[{"foo": 10, "bar": {"qux": 20}}, {"foo": 20, "bar": {"baz": "quux"}}]'
  expected: |
    {
      "bar": {
        "qux": 20
      },
      "foo": 10
    }
    {
      "bar": {
        "baz": "quux",
        "qux": 20
      },
      "foo": 10
    }
    {
      "bar": {
        "baz": "quux",
        "qux": 20
      },
      "foo": 20
    }
    {
      "bar": {
        "baz": "quux"
      },
      "foo": 20
    }

- name: divide strings
  args:
    - '.[] / .[]'
  input: '["abc", "a", "b"]'
  expected: |
    [
      "",
      ""
    ]
    [
      "a"
    ]
    [
      "b"
    ]
    [
      "",
      "bc"
    ]
    [
      "",
      ""
    ]
    [
      "b"
    ]
    [
      "a",
      "c"
    ]
    [
      "a"
    ]
    [
      "",
      ""
    ]

- name: add and subtract arrays
  args:
    - '.[] + .[] - .[]'
  input: '[[1, 2], [3, 4]]'
  expected: |
    []
    [
      3,
      4
    ]
    [
      3,
      4
    ]
    [
      3,
      4,
      3,
      4
    ]
    [
      1,
      2,
      1,
      2
    ]
    [
      1,
      2
    ]
    [
      1,
      2
    ]
    []

- name: add object
  args:
    - '.[] + .[]'
  input: '[{"a":1},{"b":2}]'
  expected: |
    {
      "a": 1
    }
    {
      "a": 1,
      "b": 2
    }
    {
      "a": 1,
      "b": 2
    }
    {
      "b": 2
    }

- name: add null
  args:
    - '.[] + .[]'
  input: '[1, 2, null]'
  expected: |
    2
    3
    1
    3
    4
    2
    1
    2
    null

- name: subtract null
  args:
    - '.[] - .[]'
  input: '[1, 2, null]'
  expected: |
    0
    1
  error: |
    cannot subtract: null and number (1)

- name: subtract object
  args:
    - '.[] - .[]'
  input: '[{"a":1},{"b":2}]'
  error: |
    cannot subtract: object ({"a":1}) and object ({"a":1})

- name: comparison operators
  args:
    - '[.[] > .[], .[] < .[], .[] >= .[], .[] <= .[], .[] == .[], .[] != .[]] | while(length>0; .[120:]) | .[:120] | map(if . then 1 else 0 end) | join("")'
  input: '[null, false, true, 0, 1, "", "a", "b", "abc", [], [1], [2], [3, 4], ["a", "b"], [[]], [[], []], [{}], {}, {"a": ""}, {"a":[1]}, {"b":[1]}, {"b": []}, {"b": [[]]}, {"a": 0, "b": 1}]'
  expected: |
    "011111111111111111111111001111111111111111111111000111111111111111111111000011111111111111111111000001111111111111111111"
    "000000111111111111111111000000011111111111111111000000000111111111111111000000010111111111111111000000000011111111111111"
    "000000000001111111111111000000000000111111111111000000000000011111111111000000000000001111111111000000000000000111111111"
    "000000000000000011111111000000000000000001111111000000000000000000111111000000000000000000011111000000000000000000001111"
    "000000000000000000000010000000000000000000001010000000000000000000000000000000000000000000001110000000000000000000000000"
    "100000000000000000000000110000000000000000000000111000000000000000000000111100000000000000000000111110000000000000000000"
    "111111000000000000000000111111101000000000000000111111100000000000000000111111111000000000000000111111111100000000000000"
    "111111111110000000000000111111111111000000000000111111111111100000000000111111111111110000000000111111111111111000000000"
    "111111111111111100000000111111111111111110000000111111111111111111000000111111111111111111100000111111111111111111110101"
    "111111111111111111110001111111111111111111111101111111111111111111110000111111111111111111111111011111111111111111111111"
    "001111111111111111111111000111111111111111111111000011111111111111111111000001111111111111111111000000111111111111111111"
    "000000010111111111111111000000011111111111111111000000000111111111111111000000000011111111111111000000000001111111111111"
    "000000000000111111111111000000000000011111111111000000000000001111111111000000000000000111111111000000000000000011111111"
    "000000000000000001111111000000000000000000111111000000000000000000011111000000000000000000001010000000000000000000001110"
    "000000000000000000000010000000000000000000001111100000000000000000000000110000000000000000000000111000000000000000000000"
    "111100000000000000000000111110000000000000000000111111000000000000000000111111100000000000000000111111111000000000000000"
    "111111101000000000000000111111111100000000000000111111111110000000000000111111111111000000000000111111111111100000000000"
    "111111111111110000000000111111111111111000000000111111111111111100000000111111111111111110000000111111111111111111000000"
    "111111111111111111100000111111111111111111110000111111111111111111111101111111111111111111110101111111111111111111111111"
    "111111111111111111110001100000000000000000000000010000000000000000000000001000000000000000000000000100000000000000000000"
    "000010000000000000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001000000000000000"
    "000000000100000000000000000000000010000000000000000000000001000000000000000000000000100000000000000000000000010000000000"
    "000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001000000000000000000000000100000"
    "000000000000000000010000000000000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001"
    "011111111111111111111111101111111111111111111111110111111111111111111111111011111111111111111111111101111111111111111111"
    "111110111111111111111111111111011111111111111111111111101111111111111111111111110111111111111111111111111011111111111111"
    "111111111101111111111111111111111110111111111111111111111111011111111111111111111111101111111111111111111111110111111111"
    "111111111111111011111111111111111111111101111111111111111111111110111111111111111111111111011111111111111111111111101111"
    "111111111111111111110111111111111111111111111011111111111111111111111101111111111111111111111110"

- name: comparison and arithmetic operators
  args:
    - '[.[] + .[] > .[] - .[], .[] * .[] < .[] / .[] + .[] / .[], .[] == .[] * .[]] | while(length>0; .[120:]) | .[:120] | map(if . then 1 else 0 end) | join("")'
  input: '[1, 2, 3]'
  expected: |
    "111111111111111111011111111111111111111111111111111111111111111111111111111111111100000000110100000111100100100000000100"
    "000000110100000100000000100000000100000000110100000111100100111110100110100000110100000111100100110100000110100000110100"
    "000111100100111110100111110100111100100111100100111110100111100100111100100111100100100000000110100000111100100000000000"
    "100000000100000000000000000100000000100000000100000000110100000111100100100000000100000000110100000100000000100000000100"
    "000000110100000111100100111110100100000000110100000110100000100000000110100000110100000100000000110100000111100100000000"
    "000100000000100000000000000000000000000100000000100000000110100000111100100100000000100000000110100000000000000100000000"
    "100000000100000000110100000111100100100000000100000000110100000100000000100000000100000000100010001010000000001000000"

- name: condition
  args:
    - '.[] | if . then . else empty end'
  input: '[false, true, 0, 1]'
  expected: |
    true
    0
    1

- name: condition with elif
  args:
    - '.[] | if . then . elif [] then . else empty end'
  input: '[false, true, 0, 1]'
  expected: |
    false
    true
    0
    1

- name: iterator in condition
  args:
    - 'if .. then [] else {} end'
  input: '{ "foo": false }'
  expected: |
    []
    {}

- name: invalid query
  args:
    - '>abc'
  input: '{}'
  error: |
    invalid query: >abc
        >abc
        ^  invalid syntax

- name: invalid query
  args:
    - '.abc['
  input: '{}'
  error: |
    invalid query: .abc[
        .abc[
            ^  unexpected token "["

- name: invalid query
  args:
    - '[ .[] | { id } ]'
  input: '{}'
  error: |
    invalid query: [ .[] | { id } ]
        [ .[] | { id } ]
              ^  unexpected "|" (expected "]")

- name: invalid json eof
  input: '{'
  error: |
    invalid json: unexpected EOF
        {
         ^

- name: invalid json invalid character
  input: |
    {
      "あいうえお" 100
    }
  error: |
    invalid json: invalid character '1' after object key
          "あいうえお" 100
                       ^

- name: invalid json string literal
  input: |
    {
      "いろは": n
    }
  error: |
    invalid json: invalid character '\n' in literal null (expecting 'u')
          "いろは": n
                     ^

- name: multiple json in input
  input: '{}[]{"foo":10}{"bar":[]}'
  expected: |
    {}
    []
    {
      "foo": 10
    }
    {
      "bar": []
    }
