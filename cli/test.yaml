- name: empty
  input: ''
  expected: ''

- name: number
  args:
    - '.'
  input: '128'
  expected: |
    128

- name: string
  args:
    - '.'
  input: '"Hello, world!\n\t\uff06"'
  expected: |
    "Hello, world!\n\t＆"

- name: object
  input: '{"foo": 128}'
  expected: |
    {
      "foo": 128
    }

- name: object index
  args:
    - '.foo'
  input: '{"foo": 128}'
  expected: |
    128

- name: object index
  args:
    - '.["foo"]'
  input: '{"foo": 128}'
  expected: |
    128

- name: object index by string
  args:
    - '."2\(.foo[])3"'
  input: '{"foo":[1,2],"213":3,"223":6}'
  expected: |
    3
    6

- name: object index by query
  args:
    - '.c[.a + .b]'
  input: '{ "a": "b", "b": "c", "c": {"bc": 128} }'
  expected: |
    128

- name: deep object index by query
  args:
    - '.d[.a][.b][.c]'
  input: '{ "a": "b", "b": "c", "c": "d", "d": { "b": { "c": { "d": 128 } } } }'
  expected: |
    128

- name: object index by iterator
  args:
    - '.c[][.a[] + .b[]]'
  input: '{ "a": ["a", "b"], "b": ["c", "d"], "c": [{"ac": 1, "bc": 2, "ad": 3, "bd": 4}, {"ac": 5, "bc": 6, "ad": 7, "bd": 8}] }'
  expected: | # order is different from jq
    1
    2
    3
    4
    5
    6
    7
    8

- name: object index by string iterator
  args:
    - '.c[]."\(.a[])"'
  input: '{ "a": [0,1], "b": [0,2], "c": [{"0":1,"1":2},{"0":3,"1":4}] }'
  expected: | # order is different from jq
    1
    2
    3
    4

- name: object index after iterator
  args:
    - '{ message: .[].message }'
  input: '[ {"message": "Hello, world" } ]'
  expected: |
    {
      "message": "Hello, world"
    }

- name: object index error
  args:
    - '.[.a + .b]'
  input: '{"a": 10, "b": 20}'
  error: |
    expected a string for object key but got: number (30)

- name: expected object
  args:
    - '.foo.bar'
  input: '{"foo": 128}'
  error: |
    expected an object but got: number (128)

- name: expected object in pipe
  args:
    - '.foo|.bar'
  input: '{"foo": 128}'
  error: |
    expected an object but got: number (128)

- name: expected object after iterator
  args:
    - '.[]|.foo|.bar'
  input: '[128]'
  error: |
    expected an object but got: number (128)

- name: object index against null
  args:
    - '.foo.bar.baz'
  input: 'null'
  expected: |
    null

- name: object optional
  args:
    - '.foo.bar.baz?'
  input: '{"foo": 128}'

- name: array index
  args:
    - '.[-5],.[-1],.[0],.[2],.[3],.[4]'
  input: '[16, 32, 48, 64]'
  expected: |
    null
    64
    16
    48
    64
    null

- name: array slice
  args:
    - -c
    - '.[2:], .[:2], .[1:3], .[0:4], .[2:1], .[-2:], .[:-2], .[-2:-1], .[-10:], .[:10], .[10:], .[:-10]'
  input: '[16, 32, 48, 64]'
  expected: |
    [48,64]
    [16,32]
    [32,48]
    [16,32,48,64]
    []
    [48,64]
    [16,32]
    [48]
    [16,32,48,64]
    [16,32,48,64]
    []
    []

- name: iterator in array index
  args:
    - -c
    - '[.[.[]],.[.[]:],.[:.[]],.[.[]:.[]],.[-.[]],.[--.[]]]'
  input: '[0, 1, 2]'
  expected: |
    [0,1,2,[0,1,2],[1,2],[2],[],[0],[0,1],[],[0],[0,1],[],[],[1],[],[],[],0,2,1,0,1,2]

- name: array index by iterator
  args:
    - '.c[][.a[] + .b[]]'
  input: '{ "a": [0,1], "b": [0,2], "c": [[1,2,3,4],[5,6,7,8]] }'
  expected: | # order is different from jq
    1
    2
    3
    4
    5
    6
    7
    8

- name: array slice by iterator
  args:
    - -c
    - '.c[][.a[] : .b[]]'
  input: '{ "a": [0,1], "b": [0,2], "c": [[1,2,3,4],[5,6,7,8]] }'
  expected: | # order is different from jq
    []
    [1,2]
    []
    [2]
    []
    [5,6]
    []
    [6]

- name: expected array
  args:
    - '.[0:1]'
  input: '{"foo": 128}'
  error: |
    expected an array but got: object ({"foo":128})

- name: array index against null
  args:
    - '.[0]'
  input: 'null'
  expected: |
    null

- name: array index with array
  args:
    - -c
    - '.[[1],[5,7,9],[],5,[3]]'
  input: '[1,3,5,7,9,8,6,5,4,3,2,1]'
  expected: |
    [0,11]
    [2]
    []
    8
    [1,9]

- name: array index error
  args:
    - '.["foo"]'
  input: '[]'
  error: |
    expected a number for indexing an array but got: string ("foo")

- name: array slice error
  args:
    - '.[:{}]'
  input: '[]'
  error: |
    expected a number for indexing an array but got: object ({})

- name: string index and slice
  args:
    - -c
    - '[.[-5],.[-1],.[0],.[3],.[4],.[6],.[2:4],.[-4:-2]]'
  input: '"あいうえお"'
  expected: |
    ["あ","お","あ","え","お","","うえ","いう"]

- name: iterator
  args:
    - '.foo | .[] | .'
  input: '{"foo": [1,2,{"bar":[]},[3,4,5]]}'
  expected: |
    1
    2
    {
      "bar": []
    }
    [
      3,
      4,
      5
    ]

- name: iterator optional
  args:
    - '.[]?'
  input: '10'

- name: object iterator
  args:
    - '.[]'
  input: '{"foo": 128}'
  expected: |
    128

- name: object optional after iterator
  args:
    - '[.[].name?]'
  input: '[ 1, { "name": 2 }, 3, { "name": 4 } ]'
  expected: |
    [
      2,
      4
    ]

- name: pipe
  args:
    - '.foo | .bar'
  input: '{"foo": {"bar": {"baz": 128}}}'
  expected: |
    {
      "baz": 128
    }

- name: null values
  args:
    - '.[] | null'
  input: '["a", 1, [], {}]'
  expected: |
    null
    null
    null
    null

- name: boolean values
  args:
    - '.[] | true, false'
  input: '["a", 1]'
  expected: |
    true
    false
    true
    false

- name: empty value
  args:
    - '.[] | empty, empty, . + [empty,.][], [empty,.][] / 1, empty < ., . and empty, empty or .'
  input: '[0, 1]'
  expected: |
    0
    0
    2
    1

- name: unary operators
  args:
    - -c
    - 'map(-.[]), map(+.[])'
  input: '[[1,2,3]]'
  expected: |
    [-1,-2,-3]
    [1,2,3]

- name: object construction
  args:
    - -c
    - '{ foo: .foo.bar, "bar": .foo, "": false }'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {"":false,"bar":{"bar":["a","b"]},"foo":["a","b"]}

- name: object construction shortcut
  args:
    - '{foo,"bar",qux,quxx:.foo}'
  input: '{"foo": 1, "bar": 2, "baz": 3}'
  expected: |
    {
      "bar": 2,
      "foo": 1,
      "qux": null,
      "quxx": 1
    }

- name: empty object
  args:
    - '{}'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {}

- name: iterator in object
  args:
    - -c
    - '{ foo: .foo[], bar: .bar[] }'
  input: '{"foo":[1,2],"bar":["a","b"]}'
  expected: |
    {"bar":"a","foo":1}
    {"bar":"b","foo":1}
    {"bar":"a","foo":2}
    {"bar":"b","foo":2}

- name: iterator in object key
  args:
    - -c
    - '{ (.[]): .. }'
  input: '["a", "b"]'
  expected: |
    {"a":["a","b"]}
    {"a":"a"}
    {"a":"b"}
    {"b":["a","b"]}
    {"b":"a"}
    {"b":"b"}

- name: binary operator in object key and value
  args:
    - -c
    - '{ (.[] + .[]): (.[] + .[]) }'
  input: '["foo", "bar"]'
  expected: |
    {"foofoo":"foofoo"}
    {"foofoo":"barfoo"}
    {"foofoo":"foobar"}
    {"foofoo":"barbar"}
    {"barfoo":"foofoo"}
    {"barfoo":"barfoo"}
    {"barfoo":"foobar"}
    {"barfoo":"barbar"}
    {"foobar":"foofoo"}
    {"foobar":"barfoo"}
    {"foobar":"foobar"}
    {"foobar":"barbar"}
    {"barbar":"foofoo"}
    {"barbar":"barfoo"}
    {"barbar":"foobar"}
    {"barbar":"barbar"}

- name: error in object key
  args:
    - -c
    - '{ (.[]): .. }'
  input: '["a", 1]'
  expected: |
    {"a":["a",1]}
    {"a":"a"}
    {"a":1}
  error: |
    expected a string for object key but got: number (1)

- name: error in object value
  args:
    - -c
    - '.[] | { (.k): .a.b }'
  input: '[{"a":{"b":10},"k":"a"}, {"a":10,"k":"b"}]'
  expected: |
    {"a":10}
  error: |
    expected an object but got: number (10)

- name: pipe in object key
  args:
    - '{ (.foo|.bar): .foo.bar }'
  input: '{"foo":{"bar":"baz"}}'
  expected: |
    {
      "baz": "baz"
    }

- name: number in object key
  args:
    - '{ (.foo): .foo }'
  input: '{"foo":10}'
  error: |
    expected a string for object key but got: number (10)

- name: null in object key
  args:
    - '{ (.foo): .foo }'
  input: '{}'
  error: |
    expected a string for object key but got: null

- name: keyword in object key
  args:
    - -c
    - '{if:0,and:1,or:2,then:3,else:4,elif:5,end:6,as:7,def:8,reduce:9,foreach:10,try:11,catch:12,label:13,import:14,include:15,module:16}'
  input: 'null'
  expected: |
    {"and":1,"as":7,"catch":12,"def":8,"elif":5,"else":4,"end":6,"foreach":10,"if":0,"import":14,"include":15,"label":13,"module":16,"or":2,"reduce":9,"then":3,"try":11}

- name: array
  args:
    - '[.foo, ., false]'
  input: '{"foo": {"bar": 128}}'
  expected: |
    [
      {
        "bar": 128
      },
      {
        "foo": {
          "bar": 128
        }
      },
      false
    ]

- name: empty array
  args:
    - '[]'
  input: '{"foo": {"bar": 128}}'
  expected: |
    []

- name: pipe in array
  args:
    - '[.foo|.bar]'
  input: '{"foo": {"bar": 128}}'
  expected: |
    [
      128
    ]

- name: iterator in array
  args:
    - '[.foo|.bar[][]]'
  input: '{"foo": {"bar": [[1],[2],[3]]}}'
  expected: |
    [
      1,
      2,
      3
    ]

- name: error after iterator
  args:
    - '[ .[] | .foo ]'
  input: '[ [1, 2, 3], 4, 5]'
  error: |
    expected an object but got: array ([1,2,3])

- name: function after iterator error
  args:
    - '.[] | .foo | null'
  input: '[1, 2, 3]'
  error: |
    expected an object but got: number (1)

- name: multiple iterators in array
  args:
    - -c
    - '[.[],..,.[]]'
  input: '[1, 2, 3]'
  expected: |
    [1,2,3,[1,2,3],1,2,3,1,2,3]

- name: recurse
  args:
    - -c
    - '..'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {"foo":{"bar":["a","b"]}}
    {"bar":["a","b"]}
    ["a","b"]
    "a"
    "b"

- name: recurse after iterator
  args:
    - '.[] | ..'
  input: '{"foo":[{"bar":128}]}'
  expected: |
    [
      {
        "bar": 128
      }
    ]
    {
      "bar": 128
    }
    128

- name: recurse and pipe
  args:
    - '.. | .foo?'
  input: '{"foo":{"bar":["a","b"]}}'
  expected: |
    {
      "bar": [
        "a",
        "b"
      ]
    }
    null

- name: recurse in object value
  args:
    - -c
    - '{ foo: .. }'
  input: '{"foo":[1,2,3]}'
  expected: |
    {"foo":{"foo":[1,2,3]}}
    {"foo":[1,2,3]}
    {"foo":1}
    {"foo":2}
    {"foo":3}

- name: length function
  args:
    - -c
    - 'map(length)'
  input: '[42, -42, {"a":1,"b":2}, [3,4,5], "Hello, world", "あいうえお", null]'
  expected: |
    [42,42,2,3,12,5,0]

- name: length function error
  args:
    - 'length'
  input: 'false'
  error: |
    length cannot be applied to: boolean (false)

- name: keys function
  args:
    - '[.[]|keys]'
  input: '[{"a":1,"b":2}, [3,4,5]]'
  expected: |
    [
      [
        "a",
        "b"
      ],
      [
        0,
        1,
        2
      ]
    ]

- name: utf8bytelength function
  args:
    - 'utf8bytelength'
  input: '"あいうえお☆ミ"'
  expected: |
    21

- name: has function on objects
  args:
    - 'map(has(.c[]))'
  input: '[{"a":{"b":1},"c":["a","b"]}, {"c":["b","c"]}]'
  expected: |
    [
      true,
      false,
      false,
      true
    ]

- name: has function on arrays
  args:
    - 'map(has(2))'
  input: '[[1, 2, 3], [1, 3]]'
  expected: |
    [
      true,
      false
    ]

- name: has/0 is not defined
  args:
    - 'map(has)'
  input: '[0]'
  error: |
    function not defined: has/0

- name: has/2 is not defined
  args:
    - 'map(has(1; 2))'
  input: '[0]'
  error: |
    function not defined: has/2

- name: has function type error
  args:
    - 'has(0)'
  input: '{}'
  error: |
    cannot check wether object ({}) has a key: number (0)

- name: in function for object
  args:
    - 'map(in({"foo": 42}))'
  input: '["foo", "bar"]'
  expected: |
    [
      true,
      false
    ]

- name: in function for array
  args:
    - 'map(in([3, 4]))'
  input: '[-1, 0, 1, 2]'
  expected: |
    [
      false,
      true,
      true,
      false
    ]

- name: in function type error
  args:
    - 'in([])'
  input: '"x"'
  error: |
    cannot check wether array ([]) has a key: string ("x")

- name: map function
  args:
    - -c
    - 'map(..)'
  input: '[{"a":{"b":1}}, [2,3,4]]'
  expected: |
    [{"a":{"b":1}},{"b":1},1,[2,3,4],2,3,4]

- name: to_entries function
  args:
    - -c
    - 'to_entries'
  input: '[10, 20] {"a": 10, "b": []}'
  expected: |
    [{"key":0,"value":10},{"key":1,"value":20}]
    [{"key":"a","value":10},{"key":"b","value":[]}]

- name: add function
  args:
    - -c
    - 'map(add)'
  input: '[[], [1,2,3], ["a","b","c"], [[3],[4,5],[6]], [{"a":1}, {"b":2}, {"a":3}]]'
  expected: |
    [null,6,"abc",[3,4,5,6],{"a":3,"b":2}]

- name: flatten/0 function
  args:
    - -c
    - 'map(flatten)'
  input: '[[0, [[[[[1]]]]]], [0, [1, [2]], [1, [[3], 2]]]]'
  expected: |
    [[0,1],[0,1,2,1,3,2]]

- name: flatten/1 function
  args:
    - -c
    - 'map(flatten(2))'
  input: '[[0, [[[[[1]]]]]], [0, [1, [2]], [1, [[3], 2]]]]'
  expected: |
    [[0,[[[1]]]],[0,1,2,1,[3],2]]

- name: min, min_by, max, max_by functions
  args:
    - -c
    - '[min, min_by(.[1]), min_by(.[2]), max, max_by(.[1]), max_by(.[2])]'
  input: '[] [[4,2,"a"],[3,1,"a"],[2,4,"a"],[1,3,"a"]]'
  expected: |
    [null,null,null,null,null,null]
    [[1,3,"a"],[3,1,"a"],[4,2,"a"],[4,2,"a"],[2,4,"a"],[1,3,"a"]]

- name: sort, sort_by, group_by functions
  args:
    - -c
    - 'sort, sort_by(.a), sort_by(.b), sort_by(.b, .c), group_by(.b), group_by(.c, .a), group_by(.a + .b - .c == 2)'
  input: '[{"a": 1, "b": 4, "c": 5}, {"a": 4, "b": 1, "c": 2}, {"a": 1, "b": 4, "c": 3}, {"a": 3, "b": 2, "c": 1}]'
  expected: |
    [{"a":1,"b":4,"c":3},{"a":1,"b":4,"c":5},{"a":3,"b":2,"c":1},{"a":4,"b":1,"c":2}]
    [{"a":1,"b":4,"c":5},{"a":1,"b":4,"c":3},{"a":3,"b":2,"c":1},{"a":4,"b":1,"c":2}]
    [{"a":4,"b":1,"c":2},{"a":3,"b":2,"c":1},{"a":1,"b":4,"c":5},{"a":1,"b":4,"c":3}]
    [{"a":4,"b":1,"c":2},{"a":3,"b":2,"c":1},{"a":1,"b":4,"c":3},{"a":1,"b":4,"c":5}]
    [[{"a":4,"b":1,"c":2}],[{"a":3,"b":2,"c":1}],[{"a":1,"b":4,"c":5},{"a":1,"b":4,"c":3}]]
    [[{"a":3,"b":2,"c":1}],[{"a":4,"b":1,"c":2}],[{"a":1,"b":4,"c":3}],[{"a":1,"b":4,"c":5}]]
    [[{"a":1,"b":4,"c":5},{"a":4,"b":1,"c":2},{"a":3,"b":2,"c":1}],[{"a":1,"b":4,"c":3}]]

- name: unique, unique_by functions
  args:
    - -c
    - 'unique, unique_by(length)'
  input: '[7,3,5,1,4,2,5,3,6,1,7,4,3] ["cat", "dog", "hello", "world", "banana", "apple"]'
  expected: |
    [1,2,3,4,5,6,7]
    [1,2,3,4,5,6,7]
    ["apple","banana","cat","dog","hello","world"]
    ["cat","hello","banana"]

- name: arrays, objects, iterables, booleans, numbers, strings, nulls, values, scalars functions
  args:
    - -c
    - 'map(arrays), map(objects), map(iterables), map(booleans), map(numbers), map(strings), map(nulls), map(values), map(scalars)'
  input: '[null, true, false, 0, 1, "", "foo", [], [2, []], {}, { "foo": [] }]'
  expected: |
    [[],[2,[]]]
    [{},{"foo":[]}]
    [[],[2,[]],{},{"foo":[]}]
    [true,false]
    [0,1]
    ["","foo"]
    [null]
    [true,false,0,1,"","foo",[],[2,[]],{},{"foo":[]}]
    [null,true,false,0,1,"","foo"]

- name: recurse/0 function
  args:
    - -c
    - 'recurse'
  input: '{"a":{"b":[1]}}'
  expected: |
    {"a":{"b":[1]}}
    {"b":[1]}
    [1]
    1

- name: recurse/1 function
  args:
    - -c
    - 'recurse(.a[])'
  input: '{"a":[{"a": []}, {"a":[{"a":[]}]}]}'
  expected: |
    {"a":[{"a":[]},{"a":[{"a":[]}]}]}
    {"a":[]}
    {"a":[{"a":[]}]}
    {"a":[]}

- name: recurse/2 function
  args:
    - -c
    - '[recurse(. + .; . < 1000)]'
  input: '1'
  expected: |
    [1,2,4,8,16,32,64,128,256,512]

- name: while function
  args:
    - -c
    - '[while(.[0]<100; [.[1], .[0]+.[1]]) | .[0]]'
  input: '[0, 1]'
  expected: |
    [0,1,1,2,3,5,8,13,21,34,55,89]

- name: until function
  args:
    - '[.,1] | until(.[0]==0; [.[0]-1, .[0]*.[1]]) | .[1]'
  input: '20'
  expected: |
    2432902008176640000

- name: range function
  args:
    - -c
    - '[range(.)], [range(. + 1)], [range(3; 5)], [range(0; 10; 3)], [range(0; 10; -1)], [range(5; -5; -3)]'
  input: '3'
  expected: |
    [0,1,2]
    [0,1,2,3]
    [3,4]
    [0,3,6,9]
    []
    [5,2,-1,-4]

- name: range function with iterators in argument
  args:
    - -c
    - '[range(-.; .+1)] | [range(.[]; .[]; .[])] | recurse(.[26:];.[0])|.[:26] | map(.+3)'
  input: '3'
  expected: |
    [0,0,0,0,1,0,0,0,1,2,0,2,0,0,1,2,3,0,2,0,3,0,1,2,3,4]
    [0,2,4,0,3,0,1,2,3,4,5,0,2,4,0,3,1,1,1,1,1,1,1,2,1,1]
    [1,2,3,1,3,1,1,2,3,4,1,3,1,4,1,2,3,4,5,1,3,5,1,4,2,2]
    [2,1,2,2,2,2,2,2,2,3,2,2,2,3,4,2,4,2,2,3,4,5,2,4,2,5]
    [3,3,1,3,2,1,3,3,3,2,3,3,3,3,3,3,3,4,3,3,3,4,5,3,5,3]
    [4,1,4,2,4,3,2,1,4,4,2,4,3,2,4,4,4,3,4,4,4,4,4,4,4,5]
    [4,4,5,2,5,3,1,5,4,3,2,1,5,2,5,3,5,4,3,2,5,5,3,5,4,3]
    [5,5,5,4,5,5,5,5,5,5,6,3,6,4,2,6,5,4,3,2,1,6,3,6,4,2]
    [6,5,4,3,2,6,3,6,4,6,5,4,3,6,6,4,6,5,4,6,6,6,5,6,6,6]

- name: tonumber function
  args:
    - 'map(tonumber)'
  input: '["0", "12345", "-43210", 3.14]'
  expected: |
    [
      0,
      12345,
      -43210,
      3.14
    ]

- name: tostring function
  args:
    - 'map(tostring)'
  input: '["foo bar", 3.14, {"foo": "-43210"}, false, [1,2,3]]'
  expected: |
    [
      "foo bar",
      "3.14",
      "{\"foo\":\"-43210\"}",
      "false",
      "[1,2,3]"
    ]

- name: type function
  args:
    - 'map(type)'
  input: '[null, false, true, 0, "foo", [], {}]'
  expected: |
    [
      "null",
      "boolean",
      "boolean",
      "number",
      "string",
      "array",
      "object"
    ]

- name: reverse function
  args:
    - 'reverse'
  input: '[0, 1, 2, 3, 4]'
  expected: |
    [
      4,
      3,
      2,
      1,
      0
    ]

- name: indices function for array
  args:
    - 'indices(1), indices([]), indices([1,2]), indices([3,4,5])'
  input: '[0, 1, 2, 3, 4, 3, 2, 1, 2, 1, 2, 3, 4]'
  expected: |
    [
      1,
      7,
      9
    ]
    []
    [
      1,
      7,
      9
    ]
    []

- name: indices function for string
  args:
    - 'indices(""), indices("ell"), indices("wor"), indices("ol"), indices("うえ")'
  input: '"hello, world, hello, word あいうえお"'
  expected: | # different from jq due to multibyte characters
    []
    [
      1,
      15
    ]
    [
      7,
      21
    ]
    []
    [
      28
    ]

- name: index, rindex functions
  args:
    - 'index(","), rindex(","), indices(",")'
  input: '"a,bc,def,ghij,klmno"'
  expected: |
    1
    13
    [
      1,
      4,
      8,
      13
    ]

- name: startswith function
  args:
    - 'map(startswith("foo"))'
  input: '["", "fo", "foo", "fooo", "barfoo"]'
  expected: |
    [
      false,
      false,
      true,
      true,
      false
    ]

- name: endswith function
  args:
    - 'map(endswith("foo"))'
  input: '["", "fo", "foo", "fooo", "barfoo"]'
  expected: |
    [
      false,
      false,
      true,
      false,
      true
    ]

- name: ltrimstr function
  args:
    - 'map(ltrimstr("foo"))'
  input: '["", "fo", "foo", "fooo", "barfoo"]'
  expected: |
    [
      "",
      "fo",
      "",
      "o",
      "barfoo"
    ]

- name: rtrimstr function
  args:
    - 'map(rtrimstr("foo"))'
  input: '["", "fo", "foo", "fooo", "barfoo"]'
  expected: |
    [
      "",
      "fo",
      "",
      "fooo",
      "bar"
    ]

- name: combinations/0 function
  args:
    - -c
    - '[combinations]'
  input: '[[1, 2, 3], [4, 5, 6]]'
  expected: |
    [[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]

- name: combinations/1 function
  args:
    - -c
    - '[combinations(3)]'
  input: '[0, 1]'
  expected: |
    [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]

- name: join function
  args:
    - 'join(",")'
  input: '[null, false, true, 0, 1, "", "a", "b", "abc"]'
  expected: |
    ",false,true,0,1,,a,b,abc"

- name: join function with iterator argument
  args:
    - '. / "" | join(.[])'
  input: '"abcde"'
  expected: |
    "aabacadae"
    "abbbcbdbe"
    "acbcccdce"
    "adbdcddde"
    "aebecedee"

- name: join function error
  args:
    - 'try join(",") catch .'
  input: '["1","2",[3,4,5]]'
  expected: |
    "cannot add: string (\"1,2,\") and array ([3,4,5])"

- name: ascii_downcase function
  args:
    - 'ascii_downcase'
  input: '"@ABC XYZ[] `abc xyz{} ☆"'
  expected: |
    "@abc xyz[] `abc xyz{} ☆"

- name: ascii_upcase function
  args:
    - 'ascii_upcase'
  input: '"@ABC XYZ[] `abc xyz{} ☆"'
  expected: |
    "@ABC XYZ[] `ABC XYZ{} ☆"

- name: walk function
  args:
    - -c
    - 'walk(if type == "boolean" then not else . + . end) | .[]'
  input: '[1, ["a", {"b": []}], {"c": [null, false, true]}]'
  expected: |
    2
    ["aa",{"b":[]},"aa",{"b":[]}]
    {"c":[null,true,false,null,true,false]}
    2
    ["aa",{"b":[]},"aa",{"b":[]}]
    {"c":[null,true,false,null,true,false]}

- name: transpose function
  args:
    - -c
    - 'transpose'
  input: '[] [[1,2,3,[]],[4,"foo",{}],[5,6]]'
  expected: |
    []
    [[1,4,5],[2,"foo",6],[3,{},null],[[],null,null]]

- name: function not defined
  args:
    - 'abc'
  input: '{}'
  error: |
    function not defined: abc/0

- name: variable not defined
  args:
    - '$abc'
  input: '{}'
  error: |
    variable not defined: $abc

- name: argument count error
  args:
    - 'map(.;.)'
  input: '{}'
  error: |
    function not defined: map/2

- name: function declaration
  args:
    - 'def f(g): g | g; f(..)'
  input: '[0, 1]'
  expected: |
    [
      0,
      1
    ]
    0
    1
    0
    1

- name: function declaration and recursive call
  args:
    - 'def f(g): if type == "array" then map(f(g * 2)) else g end; f(.)'
  input: '[[[1,2]]]'
  expected: |
    [
      [
        [
          8,
          16
        ]
      ]
    ]

- name: argument count error for custom function
  args:
    - 'def f(g): g | g; f'
  input: '{}'
  error: |
    function not defined: f/0

- name: add, subtract, multiply, divide, modulo numbers
  args:
    - -c
    - '[.[] + .[] % .[] * .[] - .[] / .[]] | while(length>0; .[8:]) | .[:8]'
  input: '[5, 16]'
  expected: |
    [4,15,9,20,29,40,4,15]
    [4,15,20,31,84,95,4,15]
    [1.7999999999999998,12.8,6.8,17.8,26.8,37.8,1.7999999999999998,12.8]
    [1.7999999999999998,12.8,17.8,28.8,81.8,92.8,1.7999999999999998,12.8]
    [4.6875,15.6875,9.6875,20.6875,29.6875,40.6875,4.6875,15.6875]
    [4.6875,15.6875,20.6875,31.6875,84.6875,95.6875,4.6875,15.6875]
    [4,15,9,20,29,40,4,15]
    [4,15,20,31,84,95,4,15]

- name: zero division
  args:
    - '.[] / .[]'
  input: '[1, 0]'
  expected: |
    1
    0
  error: |
    cannot divide number (1) by: number (0)

- name: zero modulo
  args:
    - '.[] % .[]'
  input: '[1, 0]'
  expected: |
    0
    0
  error: |
    cannot modulo number (1) by: number (0)

- name: add strings
  args:
    - '.[] + .[] + "c"'
  input: '["a", "b"]'
  expected: |
    "aac"
    "bac"
    "abc"
    "bbc"

- name: multiply constant
  args:
    - '3 * .[], 2.5 * .[], .054e2 * .[]'
  input: '[1, 2.5, "abc"]'
  expected: |
    3
    7.5
    "abcabcabc"
    2.5
    6.25
    "abcabc"
    5.4
    13.5
    "abcabcabcabcabc"

- name: multiply strings
  args:
    - '(.[] * .[] * .[])?'
  input: '[2.5, 3.7, "abc"]'
  expected: |
    15.625
    23.125
    "abcabcabcabc"
    23.125
    34.225
    "abcabcabcabcabcabc"
    "abcabcabcabc"
    "abcabcabcabcabcabc"

- name: multiply objects
  args:
    - -c
    - '.[] * .[]'
  input: '[{"foo": 10, "bar": {"qux": 20}}, {"foo": 20, "bar": {"baz": "quux"}}]'
  expected: |
    {"bar":{"qux":20},"foo":10}
    {"bar":{"baz":"quux","qux":20},"foo":10}
    {"bar":{"baz":"quux","qux":20},"foo":20}
    {"bar":{"baz":"quux"},"foo":20}

- name: divide strings
  args:
    - -c
    - '.[] / .[]'
  input: '["abc", "a", "b"]'
  expected: |
    ["",""]
    ["a"]
    ["b"]
    ["","bc"]
    ["",""]
    ["b"]
    ["a","c"]
    ["a"]
    ["",""]

- name: add and subtract arrays
  args:
    - -c
    - '.[] + .[] - .[]'
  input: '[[1, 2], [3, 4]]'
  expected: |
    []
    [3,4]
    [3,4]
    [3,4,3,4]
    [1,2,1,2]
    [1,2]
    [1,2]
    []

- name: add object
  args:
    - -c
    - '.[] + .[]'
  input: '[{"a":1},{"b":2}]'
  expected: |
    {"a":1}
    {"a":1,"b":2}
    {"a":1,"b":2}
    {"b":2}

- name: add null
  args:
    - '.[] + .[]'
  input: '[1, 2, null]'
  expected: |
    2
    3
    1
    3
    4
    2
    1
    2
    null

- name: subtract null
  args:
    - '.[] - .[]'
  input: '[1, 2, null]'
  expected: |
    0
    1
  error: |
    cannot subtract: null and number (1)

- name: subtract object
  args:
    - '.[] - .[]'
  input: '[{"a":1},{"b":2}]'
  error: |
    cannot subtract: object ({"a":1}) and object ({"a":1})

- name: comparison operators
  args:
    - '[.[] > .[], .[] < .[], .[] >= .[], .[] <= .[], .[] == .[], .[] != .[]] | while(length>0; .[120:]) | .[:120] | map(if . then 1 else 0 end) | join("")'
  input: '[null, false, true, 0, 1, "", "a", "b", "abc", [], [1], [2], [3, 4], ["a", "b"], [[]], [[], []], [{}], {}, {"a": ""}, {"a":[1]}, {"b":[1]}, {"b": []}, {"b": [[]]}, {"a": 0, "b": 1}]'
  expected: |
    "011111111111111111111111001111111111111111111111000111111111111111111111000011111111111111111111000001111111111111111111"
    "000000111111111111111111000000011111111111111111000000000111111111111111000000010111111111111111000000000011111111111111"
    "000000000001111111111111000000000000111111111111000000000000011111111111000000000000001111111111000000000000000111111111"
    "000000000000000011111111000000000000000001111111000000000000000000111111000000000000000000011111000000000000000000001111"
    "000000000000000000000010000000000000000000001010000000000000000000000000000000000000000000001110000000000000000000000000"
    "100000000000000000000000110000000000000000000000111000000000000000000000111100000000000000000000111110000000000000000000"
    "111111000000000000000000111111101000000000000000111111100000000000000000111111111000000000000000111111111100000000000000"
    "111111111110000000000000111111111111000000000000111111111111100000000000111111111111110000000000111111111111111000000000"
    "111111111111111100000000111111111111111110000000111111111111111111000000111111111111111111100000111111111111111111110101"
    "111111111111111111110001111111111111111111111101111111111111111111110000111111111111111111111111011111111111111111111111"
    "001111111111111111111111000111111111111111111111000011111111111111111111000001111111111111111111000000111111111111111111"
    "000000010111111111111111000000011111111111111111000000000111111111111111000000000011111111111111000000000001111111111111"
    "000000000000111111111111000000000000011111111111000000000000001111111111000000000000000111111111000000000000000011111111"
    "000000000000000001111111000000000000000000111111000000000000000000011111000000000000000000001010000000000000000000001110"
    "000000000000000000000010000000000000000000001111100000000000000000000000110000000000000000000000111000000000000000000000"
    "111100000000000000000000111110000000000000000000111111000000000000000000111111100000000000000000111111111000000000000000"
    "111111101000000000000000111111111100000000000000111111111110000000000000111111111111000000000000111111111111100000000000"
    "111111111111110000000000111111111111111000000000111111111111111100000000111111111111111110000000111111111111111111000000"
    "111111111111111111100000111111111111111111110000111111111111111111111101111111111111111111110101111111111111111111111111"
    "111111111111111111110001100000000000000000000000010000000000000000000000001000000000000000000000000100000000000000000000"
    "000010000000000000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001000000000000000"
    "000000000100000000000000000000000010000000000000000000000001000000000000000000000000100000000000000000000000010000000000"
    "000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001000000000000000000000000100000"
    "000000000000000000010000000000000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001"
    "011111111111111111111111101111111111111111111111110111111111111111111111111011111111111111111111111101111111111111111111"
    "111110111111111111111111111111011111111111111111111111101111111111111111111111110111111111111111111111111011111111111111"
    "111111111101111111111111111111111110111111111111111111111111011111111111111111111111101111111111111111111111110111111111"
    "111111111111111011111111111111111111111101111111111111111111111110111111111111111111111111011111111111111111111111101111"
    "111111111111111111110111111111111111111111111011111111111111111111111101111111111111111111111110"

- name: comparison and arithmetic operators
  args:
    - '[.[] + .[] > .[] - .[], .[] * .[] < .[] / .[] + .[] / .[], .[] == .[] * .[]] | while(length>0; .[120:]) | .[:120] | map(if . then 1 else 0 end) | join("")'
  input: '[1, 2, 3]'
  expected: |
    "111111111111111111011111111111111111111111111111111111111111111111111111111111111100000000110100000111100100100000000100"
    "000000110100000100000000100000000100000000110100000111100100111110100110100000110100000111100100110100000110100000110100"
    "000111100100111110100111110100111100100111100100111110100111100100111100100111100100100000000110100000111100100000000000"
    "100000000100000000000000000100000000100000000100000000110100000111100100100000000100000000110100000100000000100000000100"
    "000000110100000111100100111110100100000000110100000110100000100000000110100000110100000100000000110100000111100100000000"
    "000100000000100000000000000000000000000100000000100000000110100000111100100100000000100000000110100000000000000100000000"
    "100000000100000000110100000111100100100000000100000000110100000100000000100000000100000000100010001010000000001000000"

- name: comparison operators does not associate
  args:
    - '. == . == .'
  input: '1'
  error: |
    invalid query: . == . == .
        . == . == .
               ^  unexpected token "=="

- name: logical operators
  args:
    - '[.[] > .[] and .[] or .[] < .[]] | while(length>0; .[120:]) | .[:120] | map(if . then 1 else 0 end) | join("")'
  input: '[null, false, true, 0, "", [], {}]'
  expected: |
    "000000010000001100000111000011110001111100111111000000001000000110000011100001111000111110011111100000000100000011000001"
    "110000111100011111001111110111110000000100000011000001110000111100011111001111110000000010000001100000111000011110001111"
    "100111111011111000000010000001100000111000011110001111100111111000000001000000110000011100001111000111110011111101111100"
    "000001000000110000011100001111000111110011111100000000100000011000001110000111100011111001111110111110000000100000011000"
    "001110000111100011111001111110000000010000001100000111000011110001111100111111011111000000010000001100000111000011110001"
    "111100111111000000001000000110000011100001111000111110011111101111100000001000000110000011100001111000111110011111100000"
    "000100000011000001110000111100011111001111110000000010000001100000111000011110001111100111111000000001000000110000011100"
    "001111000111110011111101111100000001000000110000011100001111000111110011111100000000100000011000001110000111100011111001"
    "111110111110000000100000011000001110000111100011111001111110000000010000001100000111000011110001111100111111011111000000"
    "010000001100000111000011110001111100111111000000001000000110000011100001111000111110011111101111100000001000000110000011"
    "100001111000111110011111100000000100000011000001110000111100011111001111110111110000000100000011000001110000111100011111"
    "001111110000000010000001100000111000011110001111100111111000000001000000110000011100001111000111110011111100000000100000"
    "011000001110000111100011111001111110000000010000001100000111000011110001111100111111011111000000010000001100000111000011"
    "110001111100111111000000001000000110000011100001111000111110011111101111100000001000000110000011100001111000111110011111"
    "100000000100000011000001110000111100011111001111110111110000000100000011000001110000111100011111001111110000000010000001"
    "100000111000011110001111100111111011111000000010000001100000111000011110001111100111111000000001000000110000011100001111"
    "000111110011111100000000100000011000001110000111100011111001111110000000010000001100000111000011110001111100111111000000"
    "001000000110000011100001111000111110011111100000000100000011000001110000111100011111001111110111110000000100000011000001"
    "110000111100011111001111110000000010000001100000111000011110001111100111111011111000000010000001100000111000011110001111"
    "100111111000000001000000110000011100001111000111110011111101111100000001000000110000011100001111000111110011111100000000"
    "100000011000001110000111100011111001111110000000010000001100000111000011110001111100111111000000001000000110000011100001"
    "111000111110011111100000000100000011000001110000111100011111001111110000000010000001100000111000011110001111100111111000"
    "000001000000110000011100001111000111110011111101111100000001000000110000011100001111000111110011111100000000100000011000"
    "001110000111100011111001111110111110000000100000011000001110000111100011111001111110000000010000001100000111000011110001"
    "111100111111000000001000000110000011100001111000111110011111100000000100000011000001110000111100011111001111110000000010"
    "000001100000111000011110001111100111111000000001000000110000011100001111000111110011111100000000100000011000001110000111"
    "100011111001111110000000010000001100000111000011110001111100111111011111000000010000001100000111000011110001111100111111"
    "000000001000000110000011100001111000111110011111100000000100000011000001110000111100011111001111110000000010000001100000"
    "111000011110001111100111111000000001000000110000011100001111000111110011111100000000100000011000001110000111100011111001"
    "1111100000000100000011000001110000111100011111001111110"

- name: alternative operator
  args:
    - -c
    - '[.a // .b, .b // null // .a, .c[] // .d[], .d[] // .c, .c // .a, .e.a // .c[]]'
  input: '{ "a": 5, "b": false, "c": [null,false], "d": [false,3], "e": null }'
  expected: |
    [5,5,false,3,3,[null,false],null,false]

- name: explode function
  args:
    - -c
    - 'map(explode)'
  input: '["", "foo bar", "あいうえお", "\n\t"]'
  expected: |
    [[],[102,111,111,32,98,97,114],[12354,12356,12358,12360,12362],[10,9]]

- name: implode function
  args:
    - -c
    - 'map(implode)'
  input: '[[],[102,111,111,32,98,97,114],[12354,12356,12358,12360,12362],[10,9]]'
  expected: |
    ["","foo bar","あいうえお","\n\t"]

- name: condition
  args:
    - '.[] | if . then . else empty end'
  input: '[false, true, 0, 1]'
  expected: |
    true
    0
    1

- name: condition with elif
  args:
    - '.[] | if . then . elif [] then . else empty end'
  input: '[false, true, 0, 1]'
  expected: |
    false
    true
    0
    1

- name: condition without else clause
  args:
    - 'map(if . > 2 then . / 2 end)'
  input: '[1, 2, 3, 4, 5]'
  expected: |
    [
      1,
      2,
      1.5,
      2,
      2.5
    ]

- name: not function
  args:
    - 'map(not)'
  input: '[true, false]'
  expected: |
    [
      false,
      true
    ]

- name: iterator in condition
  args:
    - 'if .. then [] else {} end'
  input: '{ "foo": false }'
  expected: |
    []
    {}

- name: try
  args:
    - 'map(try utf8bytelength)'
  input: '[[], {}, [1,2], "hello", 55, true, false]'
  expected: |
    [
      5
    ]

- name: try catch
  args:
    - 'map(try utf8bytelength catch .)'
  input: '[[], {}, [1,2], "hello", 55, true, false]'
  expected: |
    [
      "utf8bytelength cannot be applied to: array ([])",
      "utf8bytelength cannot be applied to: object ({})",
      "utf8bytelength cannot be applied to: array ([1,2])",
      5,
      "utf8bytelength cannot be applied to: number (55)",
      "utf8bytelength cannot be applied to: boolean (true)",
      "utf8bytelength cannot be applied to: boolean (false)"
    ]

- name: reduce iterator
  args:
    - '[range(.)] | reduce .[] as $i (0; . + $i)'
  input: '10'
  expected: |
    45

- name: reduce arrays
  args:
    - 'reduce .[] as [$i,$j] (0; . + $i * $j)'
  input: '[[1,2,10], [3,4,10]]'
  expected: |
    14

- name: reduce objects
  args:
    - 'reduce .[] as {$i, j:$j} (0; . + $i - $j)'
  input: '[{"i":2, "j":1}, {"i":5, "j":3}, {"i":6, "j":4}]'
  expected: |
    5

- name: reduce null
  args:
    - 'reduce . as $n (.; .)'
  input: 'null'
  expected: |
    null

- name: foreach iterator
  args:
    - 'foreach range(5) as $item (0; $item)'
  input: 'null'
  expected: |
    0
    1
    2
    3
    4

- name: foreach arrays
  args:
    - 'foreach .[] as [$i, $j] (0; . + $i - $j)'
  input: '[[2,1], [5,3], [6,4]]'
  expected: |
    1
    3
    5

- name: foreach objects
  args:
    - 'foreach .[] as {a:$a} (0; . + $a; -.)'
  input: '[{"a":1}, {"b":2}, {"a":3, "b":4}]'
  expected: |
    -1
    -1
    -4

- name: label and break syntax
  args:
    - '[(label $x | .[] | if . > 2 then break $x else . end), 0]'
  input: '[1,2,3,2,1]'
  expected: |
    [
      1,
      2,
      0
    ]

- name: label and break in foreach syntax
  args:
    - '[range(.)] | label $x | foreach .[] as $i (0; if . > 5 then break $x else . + $i end)'
  input: '10'
  expected: |
    0
    1
    3
    6

- name: string interpolation
  args:
    - -c
    - '["\(.foo[])_\(.bar[])_\(.baz[])"]'
  input: '{ "foo": [0, 1], "bar": ["x", "y"], "baz": [{"a": 1}, [1], null] }'
  expected: |
    ["0_x_{\"a\":1}","1_x_{\"a\":1}","0_y_{\"a\":1}","1_y_{\"a\":1}","0_x_[1]","1_x_[1]","0_y_[1]","1_y_[1]","0_x_null","1_x_null","0_y_null","1_y_null"]

- name: string interpolation in object
  args:
    - -c
    - '[{a:"\(.foo[])"}, {"\(.foo[])": 1}, {"\(.bar[])"}]'
  input: '{ "foo": [0, 1], "bar": ["x", "y"], "x": 10, "y": 20 }'
  expected: |
    [{"a":"0"},{"a":"1"},{"0":1},{"1":1},{"x":10},{"y":20}]

- name: tojson function
  args:
    - 'map(tojson)'
  input: '[1, null, false, "foo", ["foo"], {"a": [1,2,3]}]'
  expected: |
    [
      "1",
      "null",
      "false",
      "\"foo\"",
      "[\"foo\"]",
      "{\"a\":[1,2,3]}"
    ]

- name: fromjson function
  args:
    - 'map(fromjson)'
  input: '["1", "null", "false", "\"foo\"", "[\"foo\"]", "{\"a\":[1,2,3]}"]'
  expected: |
    [
      1,
      null,
      false,
      "foo",
      [
        "foo"
      ],
      {
        "a": [
          1,
          2,
          3
        ]
      }
    ]

- name: defining variable
  args:
    - '.foo.bar as $foo | .foo.bar as $bar | {$foo} + {bar: ($bar / 2)} * { baz: 20 }'
  input: '{ "foo": { "bar": 10 } }'
  expected: |
    {
      "bar": 5,
      "baz": 20,
      "foo": 10
    }

- name: variable name error
  args:
    - '.foo as foo | {$bar}'
  input: '{ "foo": 10 }'
  error: |
    variable should start with "$" but got: "foo"

- name: variable name not found error
  args:
    - '.foo as $foo | {$bar}'
  input: '{ "foo": 10 }'
  error: |
    variable not defined: $bar

- name: binding an array
  args:
    - '. as [$i, $j] | [$j, $i]'
  input: '[] [10] [20, 30]'
  expected: |
    [
      null,
      null
    ]
    [
      null,
      10
    ]
    [
      30,
      20
    ]

- name: binding an array deeply
  args:
    - '. as [$i, [$j], [[$k]]] | [$i, $j, $k]'
  input: '[] [10] [20, [30], [[40]]]'
  expected: |
    [
      null,
      null,
      null
    ]
    [
      10,
      null,
      null
    ]
    [
      20,
      30,
      40
    ]

- name: binding an array error
  args:
    - '. as [$i, $j] | [$j, $i]'
  input: '{ "foo": 10 }'
  error: |
    expected an array but got: object ({"foo":10})

- name: binding an object
  args:
    - '. as {$foo, bar: $bar} | {$bar, $foo}'
  input: '{} {"foo": 10} {"foo": 20, "bar": 30}'
  expected: |
    {
      "bar": null,
      "foo": null
    }
    {
      "bar": null,
      "foo": 10
    }
    {
      "bar": 30,
      "foo": 20
    }

- name: binding an object deeply
  args:
    - '. as {$foo, bar: {baz: {$qux}}} | {$foo, $qux}'
  input: '{} {"foo": 10} {"foo": 20, "bar": { "baz": { "qux": 30 } } }'
  expected: |
    {
      "foo": null,
      "qux": null
    }
    {
      "foo": 10,
      "qux": null
    }
    {
      "foo": 20,
      "qux": 30
    }

- name: binding an object error
  args:
    - '. as {$i} | [$i]'
  input: '[10]'
  error: |
    expected an object but got: array ([10])

- name: binding object and array deeply
  args:
    - '. as {$a, $b: [$c, $d]} | [$a, $b, $c, $d]'
  input: '{"a":1, "b": [2, {"d": 3}]}'
  expected: |
    [
      1,
      [
        2,
        {
          "d": 3
        }
      ],
      2,
      {
        "d": 3
      }
    ]

- name: first/0, last/0 functions
  args:
    - -c
    - '[first, last]'
  input: '[1,2,3,4,5]'
  expected: |
    [1,5]

- name: first/1, last/1 functions
  args:
    - -c
    - '[first(.[]), last(.[])]'
  input: '[1,2,3,4,5]'
  expected: |
    [1,5]

- name: limit/2 function
  args:
    - -c
    - '[limit(0,3,13; range(10000000000000))]'
  input: 'null'
  expected: |
    [0,1,2,0,1,2,3,4,5,6,7,8,9,10,11,12]

- name: all/0, any/0 functions
  args:
    - -c
    - '[all, any]'
  input: '[] [false, false] [false, true] [true, true]'
  expected: |
    [true,false]
    [false,false]
    [false,true]
    [true,true]

- name: all/1, any/1 functions
  args:
    - -c
    - '[all(not), any(not)]'
  input: '[] [false, false] [false, true] [true, true]'
  expected: |
    [true,false]
    [true,true]
    [false,true]
    [false,false]

- name: all/2, any/2 functions
  args:
    - -c
    - '[all(range(.); not), any(range(.); not)]'
  input: '0 1'
  expected: |
    [true,false]
    [false,false]

- name: isempty function
  args:
    - -c
    - '[isempty(empty), isempty(range(10000000000000)), isempty(1,error("foo"))]'
  input: 'null'
  expected: |
    [true,false,false]

- name: trigonometric functions
  args:
    - 'map(sin),map(cos),map(tan) | join(",")'
  input: '[0, 1, 2]'
  expected: |
    "0,0.8414709848078965,0.9092974268256816"
    "1,0.5403023058681398,-0.4161468365471424"
    "0,1.557407724654902,-2.185039863261519"

- name: inverse trigonometric functions
  args:
    - 'map(asin),map(acos),map(atan) | join(",")'
  input: '[0, 1, 2]'
  expected: |
    "0,1.5707963267948966,null"
    "1.5707963267948966,0,null"
    "0,0.7853981633974483,1.1071487177940904"

- name: hyperbolic functions
  args:
    - 'map(sinh),map(cosh),map(tanh) | join(",")'
  input: '[0, 1, 2]'
  expected: |
    "0,1.1752011936438014,3.626860407847019"
    "1,1.5430806348152437,3.7621956910836314"
    "0,0.7615941559557649,0.9640275800758169"

- name: inverse hyperbolic functions
  args:
    - 'map(asinh),map(acosh),map(atanh) | join(",")'
  input: '[0, 1, 2]'
  expected: |
    "0,0.881373587019543,1.4436354751788103"
    "null,0,1.3169578969248166"
    "0,1.7976931348623157e+308,null"

- name: floor, round, rint, ceil, trunc, fabs, sqrt and cbrt functions
  args:
    - 'range(.) | sin | (fabs,sqrt,cbrt,sin) * 100000 | [(floor,round,rint,ceil,trunc) / 100000] | tojson'
  input: '5'
  expected: |
    "[0,0,0,0,0]"
    "[0,0,0,0,0]"
    "[0,0,0,0,0]"
    "[0,0,0,0,0]"
    "[0.84147,0.84147,0.84147,0.84148,0.84147]"
    "[0.91731,0.91732,0.91732,0.91732,0.91731]"
    "[0.94408,0.94409,0.94409,0.94409,0.94408]"
    "[0.74562,0.74562,0.74562,0.74563,0.74562]"
    "[0.90929,0.9093,0.9093,0.9093,0.90929]"
    "[0.95357,0.95357,0.95357,0.95358,0.95357]"
    "[0.9688,0.9688,0.9688,0.96881,0.9688]"
    "[0.78907,0.78907,0.78907,0.78908,0.78907]"
    "[0.14112,0.14112,0.14112,0.14113,0.14112]"
    "[0.37565,0.37566,0.37566,0.37566,0.37565]"
    "[0.52063,0.52063,0.52063,0.52064,0.52063]"
    "[0.14065,0.14065,0.14065,0.14066,0.14065]"
    "[0.7568,0.7568,0.7568,0.75681,0.7568]"
    "[null,null,null,null,null]"
    "[-0.9113,-0.9113,-0.9113,-0.91129,-0.91129]"
    "[-0.68661,-0.6866,-0.6866,-0.6866,-0.6866]"

- name: exp, exp10, exp2, expm1 functions
  args:
    - '[range(.)] | map(exp),map(exp10),map(exp2),map(expm1) | map(. * 100000 | floor / 100000) | tojson'
  input: '10'
  expected: |
    "[1,2.71828,7.38905,20.08553,54.59815,148.41315,403.42879,1096.63315,2980.95798,8103.08392]"
    "[1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000]"
    "[1,2,4,8,16,32,64,128,256,512]"
    "[0,1.71828,6.38905,19.08553,53.59815,147.41315,402.42879,1095.63315,2979.95798,8102.08392]"

- name: frexp, modf function
  args:
    - -c
    - '[range(.) | tan] | map(frexp),map(modf) | map(map(. * 100000 | floor / 100000))'
  input: '10'
  expected: |
    [[0,0],[0.7787,1],[-0.54626,2],[-0.57019,-2],[0.57891,1],[-0.84513,2],[-0.58202,-1],[0.87144,0],[-0.84997,3],[-0.90464,-1]]
    [[0,0],[0.5574,1],[-0.18504,-2],[-0.14255,-0],[0.15782,1],[-0.38052,-3],[-0.29101,-0],[0.87144,0],[-0.79972,-6],[-0.45232,-0]]

- name: log, log10, log1p, log2, logb functions
  args:
    - '[range(.) | tan] | map(log),map(log10),map(log1p),map(log2),map(logb) | map(. * 100000 | floor / 100000) | tojson'
  input: '10'
  expected: |
    "[-1.7976931348623157e+308,0.44302,null,null,0.14654,null,null,-0.1376,null,null]"
    "[-1.7976931348623157e+308,0.1924,null,null,0.06364,null,null,-0.05976,null,null]"
    "[0,0.93899,null,-0.15379,0.76909,null,-0.34391,0.62671,null,-0.60206]"
    "[-1.7976931348623157e+308,0.63914,null,null,0.21141,null,null,-0.19852,null,null]"
    "[-1.7976931348623157e+308,0,1,-3,0,1,-2,-1,2,-2]"

- name: gamma, tgamma, lgamma functions
  args:
    - '[range(.) | tan] | map(gamma),map(tgamma),map(lgamma) | map(. * 100000 | floor / 100000) | tojson'
  input: '10'
  expected: |
    "[1.7976931348623157e+308,0.88943,-2.39565,-7.75522,0.93049,0.34209,-4.41241,1.09278,-0.00159,-3.58744]"
    "[1.7976931348623157e+308,0.88943,-2.39565,-7.75522,0.93049,0.34209,-4.41241,1.09278,-0.00159,-3.58744]"
    "[1.7976931348623157e+308,-0.11718,0.87365,2.04836,-0.07204,-1.07268,1.48441,0.08872,-6.44927,1.27743]"

- name: erf, erfc, j0, j1, y0, y1 functions
  args:
    - '[range(.) | tan] | map(erf),map(erfc),map(j0),map(j1),map(y0),map(y1) | map(. * 100000 | floor / 100000) | tojson'
  input: '10'
  expected: |
    "[0,0.97237,-0.998,-0.15977,0.89845,-1,-0.31933,0.7822,-1,-0.47762]"
    "[1,0.02762,1.99799,1.15976,0.10154,1.99999,1.31932,0.21779,2,1.47761]"
    "[1,0.47958,0.11869,0.99492,0.69191,-0.36073,0.97894,0.81896,0.29307,0.9495]"
    "[0,0.56529,-0.55806,-0.0711,0.48717,-0.18735,-0.14397,0.39565,0.0653,-0.22043]"
    "[-1.7976931348623157e+308,0.40504,null,null,0.20121,null,null,-0.01971,null,null]"
    "[-1.7976931348623157e+308,-0.37491,null,null,-0.653,null,null,-0.90154,null,null]"

- name: atan2/2, copysign/2, drem/2, fdim/2, fmax/2, fmin/2, fmod/2, hypot/2, jn/2, ldexp/2, nextafter/2, nexttoward/2, remainder/2, scalb/2, scalbln/2, pow/2, yn/2 functions
  args:
    - '[range(-.;.)] | [
         [atan2(.[]; .[])],
         [copysign(.[]; .[])],
         [drem(.[]; .[])],
         [fdim(.[]; .[])],
         [fmax(.[]; .[])],
         [fmin(.[]; .[])],
         [fmod(.[]; .[])],
         [hypot(.[]; .[])],
         [jn(.[]; .[])],
         [ldexp(.[]; .[])],
         [nextafter(.[]; .[])],
         [nexttoward(.[]; .[])],
         [remainder(.[]; .[])],
         [scalb(.[]; .[])],
         [scalbln(.[]; .[])],
         [pow(.[]; .[])],
         [yn(.[]; .[])]
       ] | map([.[] | . * 10000 | round | . / 10000 | if . == 0.0 then 0.0 else . end] | join(","))'
  input: '3'
  expected: |
    [
      "-2.3562,-2.5536,-2.8198,3.1416,2.8198,2.5536,-2.1588,-2.3562,-2.6779,3.1416,2.6779,2.3562,-1.8925,-2.0344,-2.3562,3.1416,2.3562,2.0344,-1.5708,-1.5708,-1.5708,0,1.5708,1.5708,-1.249,-1.1071,-0.7854,0,0.7854,1.1071,-0.9828,-0.7854,-0.4636,0,0.4636,0.7854",
      "-3,-2,-1,0,-1,-2,-3,-2,-1,0,-1,-2,-3,-2,-1,0,-1,-2,3,2,1,0,1,2,3,2,1,0,1,2,3,2,1,0,1,2",
      "0,1,-1,0,1,-1,1,0,-1,0,1,0,0,0,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,0,1,0,-1,0,1,0",
      "0,1,2,3,4,5,0,0,1,2,3,4,0,0,0,1,2,3,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0,0,0,0",
      "-3,-2,-1,0,1,2,-2,-2,-1,0,1,2,-1,-1,-1,0,1,2,0,0,0,0,1,2,1,1,1,1,1,2,2,2,2,2,2,2",
      "-3,-3,-3,-3,-3,-3,-3,-2,-2,-2,-2,-2,-3,-2,-1,-1,-1,-1,-3,-2,-1,0,0,0,-3,-2,-1,0,1,1,-3,-2,-1,0,1,2",
      "0,-2,-1,0,1,2,-1,0,-1,0,1,0,0,0,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,0,-1,0,-1,0,1,0",
      "4.2426,3.6056,3.1623,3,3.1623,3.6056,3.6056,2.8284,2.2361,2,2.2361,2.8284,3.1623,2.2361,1.4142,1,1.4142,2.2361,3,2,1,0,1,2,3.1623,2.2361,1.4142,1,1.4142,2.2361,3.6056,2.8284,2.2361,2,2.2361,2.8284",
      "0.3091,0.4861,0.3391,-0.2601,-0.3391,0.4861,0.1289,0.3528,0.5767,0.2239,-0.5767,0.3528,0.0196,0.1149,0.4401,0.7652,-0.4401,0.1149,0,0,0,1,0,0,-0.0196,0.1149,-0.4401,0.7652,0.4401,0.1149,-0.1289,0.3528,-0.5767,0.2239,0.5767,0.3528",
      "-0.375,-0.25,-0.125,0,0.125,0.25,-0.75,-0.5,-0.25,0,0.25,0.5,-1.5,-1,-0.5,0,0.5,1,-3,-2,-1,0,1,2,-6,-4,-2,0,2,4,-12,-8,-4,0,4,8",
      "-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2",
      "-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2,-3,-2,-1,0,1,2",
      "0,1,-1,0,1,-1,1,0,-1,0,1,0,0,0,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,0,1,0,-1,0,1,0",
      "-0.375,-0.25,-0.125,0,0.125,0.25,-0.75,-0.5,-0.25,0,0.25,0.5,-1.5,-1,-0.5,0,0.5,1,-3,-2,-1,0,1,2,-6,-4,-2,0,2,4,-12,-8,-4,0,4,8",
      "-0.375,-0.25,-0.125,0,0.125,0.25,-0.75,-0.5,-0.25,0,0.25,0.5,-1.5,-1,-0.5,0,0.5,1,-3,-2,-1,0,1,2,-6,-4,-2,0,2,4,-12,-8,-4,0,4,8",
      "-0.037,-0.125,-1,1.7976931348623157e+308,1,0.125,0.1111,0.25,1,1.7976931348623157e+308,1,0.25,-0.3333,-0.5,-1,1.7976931348623157e+308,1,0.5,1,1,1,1,1,1,-3,-2,-1,0,1,2,9,4,1,0,1,4",
      "null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1.7976931348623157e+308,-1.7976931348623157e+308,1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,-1.7976931348623157e+308,5.8215,-1.6507,0.7812,0.0883,-0.7812,-1.6507,1.1278,-0.6174,0.107,0.5104,-0.107,-0.6174"
    ]

- name: fma/3 function
  args:
    - '[range(.) | . * 2 | sin] | [fma(.[]; .[]; .[])] | map(. * 100000 | floor / 100000) | join(",")'
  input: '3'
  expected: |
    "0,0,0,0,0.82682,-0.68816,0,-0.68816,0.57275,0.90929,0.90929,0.90929,0.90929,1.73611,0.22113,0.90929,0.22113,1.48204,-0.75681,-0.75681,-0.75681,-0.75681,0.07001,-1.44497,-0.75681,-1.44497,-0.18406"

- name: stringify nan and inf
  args:
    - '(2|asin),(1|atanh),(-1|atanh) | tojson,([]|join(",")),.'
  input: 'null'
  expected: |
    "null"
    ""
    null
    "1.7976931348623157e+308"
    ""
    179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    "-1.7976931348623157e+308"
    ""
    -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

- name: error/0 function
  args:
    - '.foo[] | error'
  input: '{ "foo": ["error message", "bar"] }'
  error: |
    error message

- name: error/0 function error
  args:
    - '.foo | error'
  input: '{ "foo": 1 }'
  error: |
    error cannot be applied to: number (1)

- name: error/1 function
  args:
    - '.foo | error("error message")'
  input: '{ "foo": 1 }'
  error: |
    error message

- name: error/1 function error
  args:
    - '.foo | error({})'
  input: '{ "foo": "error" }'
  error: |
    error cannot be applied to: object ({})

- name: builtins function
  args:
    - 'builtins|length > 100'
  input: 'null'
  expected: |
    true

- name: env function
  args:
    - 'env|length > 0'
  input: 'null'
  expected: |
    true

- name: compact output option
  args:
    - -c
    - '.'
  input: '{ "foo": ["hello", "world"] }'
  expected: |
    {"foo":["hello","world"]}

- name: raw string output option
  args:
    - -r
    - '.foo[]'
  input: '{ "foo": ["hello", "world", "multiple\nline"] }'
  expected: |
    hello
    world
    multiple
    line

- name: raw string output option against non-string
  args:
    - -r
    - '.'
  input: '{ "foo": "multiple\nline" }'
  expected: |
    {
      "foo": "multiple\nline"
    }

- name: raw strings input option
  args:
    - -R
    - '.'
  input: |
    {
      "foo": "bar"
    }
  expected: |
    "{"
    "  \"foo\": \"bar\""
    "}"

- name: raw strings input option error
  args:
    - -R
    - '. / 2'
  input: |
    {
      "foo": "bar"
    }
  error: |
    cannot divide: string ("}") and number (2)

- name: null input value option
  args:
    - -n
    - '[.]'
  expected: |
    [
      null
    ]

- name: null input value option with compact option
  args:
    - -n
    - -c
    - '[.,.]'
  expected: |
    [null,null]

- name: null input value option with raw strings input option
  args:
    - -n
    - -R
    - '.'
  input: 'foo'
  expected: |
    null

- name: slurp option
  args:
    - -s
    - '.'
  input: |
    null
    false
    []
    { "foo": "bar" }
  expected: |
    [
      null,
      false,
      [],
      {
        "foo": "bar"
      }
    ]

- name: slurp option with raw strings input option
  args:
    - -s
    - -R
    - '.'
  input: |
    null
    false
    foo
    bar
  expected: |
    "null\nfalse\nfoo\nbar\n"

- name: slurp option with null input option
  args:
    - -s
    - -n
    - '.'
  expected: |
    null

- name: invalid query
  args:
    - '>abc'
  input: '{}'
  error: |
    invalid query: >abc
        >abc
        ^  invalid syntax

- name: invalid query
  args:
    - '.abc['
  input: '{}'
  error: |
    invalid query: .abc[
        .abc[
            ^  unexpected token "["

- name: invalid query
  args:
    - '[ .[] | { .id } ]'
  input: '{}'
  error: |
    invalid query: [ .[] | { .id } ]
        [ .[] | { .id } ]
              ^  unexpected "|" (expected "]")

- name: invalid json eof
  input: '{'
  error: |
    invalid json: <stdin>
        {
         ^  unexpected EOF

- name: invalid json invalid character
  input: |
    {
      "あいうえお" 100
    }
  error: |
    invalid json: <stdin>
          "あいうえお" 100
                       ^  invalid character '1' after object key

- name: invalid json string literal
  input: |
    {
      "いろは": n
    }
  error: |
    invalid json: <stdin>
          "いろは": n
                     ^  invalid character '\n' in literal null (expecting 'u')

- name: multiple json in input
  input: '{}[]{"foo":10}{"bar":[]}'
  expected: |
    {}
    []
    {
      "foo": 10
    }
    {
      "bar": []
    }

- name: json file arguments
  args:
    - '.'
    - 'testdata/1.json'
    - 'testdata/2.json'
  expected: |
    {
      "foo": 10
    }
    [
      {
        "bar": []
      }
    ]

- name: json file error json
  args:
    - '.'
    - 'testdata/3.json'
  error: |
    invalid json: testdata/3.json
        {
         ^  unexpected EOF

- name: json file error json
  args:
    - '.'
    - 'testdata/4.json'
  error: |
    invalid json: testdata/4.json
          bar
          ^  invalid character 'b' looking for beginning of value

- name: json file not found
  args:
    - '.'
    - 'testdata/1.json'
    - 'testdata/5.json'
    - 'testdata/2.json'
  expected: |
    {
      "foo": 10
    }
  error: 'open testdata/5.json:'
