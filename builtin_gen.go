// Code generated by _tools/gen_builtin.go; DO NOT EDIT.

package gojq

func init() {
	x, x9, x3, x97, x1, x0, x10 := 65.0, 90.0, 32.0, 97.0, 122.0, 0.0, 1.0
	builtinFuncs = map[string]*Query{
		"add": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "add", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$x"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}},
		"all": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "all", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "all", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "all", Args: []string{"y"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "all", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "y"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "all", Args: []string{"g", "y"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "isempty", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "g"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "y"}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"any": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "any", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "any", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "any", Args: []string{"y"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "any", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "y"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "any", Args: []string{"g", "y"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "isempty", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "g"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "y"}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "not"}}}}}}}}}}}}}}}}},
		"arrays": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "arrays", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"ascii_downcase": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "ascii_downcase", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "explode"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Number: &x9}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Number: &x3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "implode"}}}}}}}}}}}}}}}}},
		"ascii_upcase": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "ascii_upcase", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "explode"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x97}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Number: &x1}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: &x3}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "implode"}}}}}}}}}}}}}}}}},
		"assign": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_assign", Args: []string{"ps", "$v"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "path", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "ps"}}}}}}}}}}}}}}}}, Pattern: &Pattern{Name: "$p"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$v"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"booleans": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "booleans", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"boolean"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"combinations": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "combinations", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$x"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}, IsSlice: true}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "combinations"}}}}}}}}}}}}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$y"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$y"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "combinations", Args: []string{"n"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$dot"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "range", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "n"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$dot"}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "combinations"}}}}}}}}}}}}}}}}}}}}}}}},
		"del": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "del", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "delpaths", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "path", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"endswith": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "endswith", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}}}}}}}}}}}}}}}}}}}}}, IsSlice: true}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"endswith"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"first": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "first", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "first", Args: []string{"g"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "g"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}}}}}}}}}}},
		"flatten": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_flatten", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$i"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_flatten", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "flatten", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "error", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"flatten depth must not be negative"`}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_flatten", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "flatten", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_flatten", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Number: &x10}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"group_by": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "group_by", Args: []string{"f"}, Body: &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_group_by", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$x"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}, IsSlice: true}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$xs"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$fx"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$xs"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$fx"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$xs"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$fx"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_group_by"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}, Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "sort_by", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_group_by"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"in": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "in", Args: []string{"xs"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$x"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "xs"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "has", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"index": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "index", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "indices", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"indices": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "indices", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, IfElif{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "explode"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "explode"}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"isempty": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "isempty", Args: []string{"g"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "first", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "g"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{False: true}}}}}}}}}}}}}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{True: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"iterables": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "iterables", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"join": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "join", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$i"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"boolean"`}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"number"`}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "tostring"}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Right: []AltRight{AltRight{Op: OpAlt, Right: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `""`}}}}}}}}}}}}}}}}}},
		"last": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "last", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Number: &x10}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "last", Args: []string{"g"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "g"}}, Pattern: &Pattern{Name: "$item"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$item"}}}}}}}}}}}}}}}}}}}}}}}},
		"leaf_paths": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "leaf_paths", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "paths", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "scalars"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"limit": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "limit", Args: []string{"$n", "g"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Foreach: &Foreach{Term: &Term{Func: &Func{Name: "g"}}, Pattern: &Pattern{Name: "$item"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}}}, Extract: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$item"}}}}}}}}}, &Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "g"}}}}}}}}}}}}}}}}}}}}}}}},
		"ltrimstr": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "ltrimstr", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "startswith", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}}}}}}}, IsSlice: true}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"ltrimstr"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"map": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "map", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"map_values": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "map_values", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}, UpdateOp: 15, Update: &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}},
		"max": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "max", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "max_by", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"max_by": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "max_by", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}, IsSlice: true}, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$x"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpLe, Right: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"min": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "min", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "min_by", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"min_by": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "min_by", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}, IsSlice: true}, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$x"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"modify": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_modify", Args: []string{"ps", "f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "path", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "ps"}}}}}}}}}}}}}}}}, Pattern: &Pattern{Name: "$p"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "setpath", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "getpath", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "delpaths", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"not": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "not", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{False: true}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{True: true}}}}}}}}}}}}}}}}}}}}}}},
		"nth": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "nth", Args: []string{"$n"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "nth", Args: []string{"$n", "g"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "error", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"nth doesn't support negative indices"`}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Label: &Label{Ident: "$out", Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Foreach: &Foreach{Term: &Term{Func: &Func{Name: "g"}}, Pattern: &Pattern{Name: "$item"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$n"}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}}}, Extract: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$item"}}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Break: "$out"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"nulls": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "nulls", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"numbers": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "numbers", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"number"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"objects": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "objects", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"paths": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "paths", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "path", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "recurse", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}, Right: []LogicRight{LogicRight{Op: OpOr, Right: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "paths", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$x"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "paths"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$p"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "getpath", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$p"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"range": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "range", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "range", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "range", Args: []string{"$start", "$end"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$start"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "while", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$end"}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "range", Args: []string{"$start", "$end", "$step"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$start"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "while", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$end"}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$start"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "while", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$end"}}}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Func: &Func{Name: "$step"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}},
		"recurse": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "recurse", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "recurse", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true, SuffixList: []*Suffix{&Suffix{Iter: true}, &Suffix{Optional: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &FuncDef{Name: "recurse", Args: []string{"f"}, Body: &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "r", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}, &FuncDef{Name: "recurse", Args: []string{"f", "cond"}, Body: &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "r", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "cond"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "r"}}}}}}}}}}}}}}}}},
		"reverse": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "reverse", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}, Right: []ArithRight{ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Number: &x10}}}, ArithRight{Op: OpSub, Right: &Factor{Left: &Term{Func: &Func{Name: "range", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"rindex": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "rindex", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "indices", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Number: &x10}}}}}}}}}}}}}}, IsSlice: true}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"rtrimstr": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "rtrimstr", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "endswith", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{End: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Unary: &Unary{Op: OpSub, Term: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"rtrimstr"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"scalars": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "scalars", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}, Right: []AndExprRight{AndExprRight{Op: OpAnd, Right: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"select": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "select", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}},
		"sort": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "sort", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "sort_by", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"sort_by": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "sort_by", Args: []string{"f"}, Body: &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_sort_by", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}, Right: &CompareRight{Op: OpGt, Right: &Arith{Left: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$x"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x10}}}}}}}}}}}}, IsSlice: true}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$xs"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$fx"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$xs"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpLt, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$fx"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_sort_by"}}}}}}}}}}}}}}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}}}}, ArithRight{Right: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$xs"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpGe, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$fx"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_sort_by"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_sort_by"}}}}}}}}}}}}}}}}},
		"startswith": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "startswith", Args: []string{"$x"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{End: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}}}}}}}}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$x"}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_type_error", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Str: `"startswith"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"strings": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "strings", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"string"`}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"to_entries": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "to_entries", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "keys"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$k"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Key: "key", Val: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$k"}}}}}}}}}, ObjectKeyVal{Key: "value", Val: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$k"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"transpose": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "transpose", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$in"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "max"}}}}}}}}}}}}}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$max"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "length"}}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$length"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "range", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$max"}}}}}}}}}}}}}}}}, Pattern: &Pattern{Name: "$j"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "range", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}, &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$length"}}}}}}}}}}}}}}}}, Pattern: &Pattern{Name: "$i"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Array: &Array{}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Array: &Array{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$in"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$i"}}}}}}}}}}}}}}}, &Suffix{SuffixIndex: &SuffixIndex{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$j"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"unique": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "unique", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "group_by", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"unique_by": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "unique_by", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "group_by", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Index: &Index{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Number: &x0}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"until": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "until", Args: []string{"cond", "next"}, Body: &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_until", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "cond"}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "next"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_until"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_until"}}}}}}}}}}}}}}}}},
		"values": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "values", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "select", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}, Right: &CompareRight{Op: OpNe, Right: &Arith{Left: &Factor{Left: &Term{Null: true}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"walk": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "walk", Args: []string{"f"}, Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}, Bind: &ExprBind{Pattern: &Pattern{Name: "$in"}, Body: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"object"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Reduce: &Reduce{Term: &Term{Func: &Func{Name: "keys"}, SuffixList: []*Suffix{&Suffix{Iter: true}}}, Pattern: &Pattern{Name: "$key"}, Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Object: &Object{}}}}}}}}}}}}}, Update: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}, Right: []ArithRight{ArithRight{Right: &Factor{Left: &Term{Object: &Object{KeyVals: []ObjectKeyVal{ObjectKeyVal{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$key"}}}}}}}}}}}}}, Val: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$in"}, SuffixList: []*Suffix{&Suffix{SuffixIndex: &SuffixIndex{Start: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "$key"}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "walk", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}, Elif: []IfElif{IfElif{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "type"}}}}, Right: &CompareRight{Op: OpEq, Right: &Arith{Left: &Factor{Left: &Term{Str: `"array"`}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "map", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "walk", Args: []*Pipe{&Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "f"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},
		"while": &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "while", Args: []string{"cond", "update"}, Body: &Query{FuncDefs: []*FuncDef{&FuncDef{Name: "_while", Body: &Query{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{If: &If{Cond: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "cond"}}}}}}}}}}}}}, Then: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Identity: true}}}}}}}}, &Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "update"}}}}}}}}}}}, &Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_while"}}}}}}}}}}}}}}}}}}}}}}}}}, Else: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "empty"}}}}}}}}}}}}}}}}}}}}}}}, Pipe: &Pipe{Commas: []*Comma{&Comma{Alts: []*Alt{&Alt{Left: &Expr{Logic: &Logic{Left: &AndExpr{Left: &Compare{Left: &Arith{Left: &Factor{Left: &Term{Func: &Func{Name: "_while"}}}}}}}}}}}}}}}}},
	}
}
